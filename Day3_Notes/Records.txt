In Java, a record is a special type of class declaration aimed at reducing the boilerplate code. Java records were introduced with the intention to be used as a fast way to create data carrier classes, i.e. the classes whose objective is to simply contain data and carry it between modules, also known as POJOs (Plain Old Java Objects) and DTOs (Data Transfer Objects). Record was introduced in Java SE 14 as a preview feature, which is a feature whose design, implementation, and specification are complete but it is not a permanent addition to the language, which means that the feature may or may not exist in the future versions of the language. Java SE 15 extends the preview feature with additional capabilities such as local record classes.


That is not all that a record can do. Records also provide us the capability to:

Create our own constructors. In records, you can create a parameterized constructor, which calls the default constructor with the provided parameters inside its body. You can also create compact constructors which are similar to default constructors with the twist that you can add some extra functionality such as checks inside the constructor body.
Create instance methods. Like any other class, you can create and call instance methods for the record class.
Create static fields. Records restrict us to write the instance variables only as parameters but enable the use of static variables and static methods.


The record has been replaced by class.
The class and its data members have been declared as final. This implies that this class cannot be extended, i.e. cannot be inherited, and is immutable as well.
The class extends java.lang.Record. This means that all records are a subclass of Record defined in java.lang package.
There is a default constructor and a parameterized constructor. You’ll notice that there is no separate declaration for the compact constructor that we defined. This is because the compact constructor does not generate a separate constructor but adds its code to the start of the default constructor’s body.
The instance and static methods are declared as they were.
The toString(), hashCode(), and equals() methods have been auto-generated by the compiler.. 